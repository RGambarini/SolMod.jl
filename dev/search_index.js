var documenterSearchIndex = {"docs":
[{"location":"notebook_examples/","page":"Notebook Examples","title":"Notebook Examples","text":"Empirical Models:\nNRTL\nUNIQUAC\nSemi-Empirical Models:\nNRTL-SAC [dev]\nUNIQUAC-SAC [dev]","category":"page"},{"location":"notebook_examples/","page":"Notebook Examples","title":"Notebook Examples","text":"[dev]: These models are currently in development and will be updated with their notebook examples when ready","category":"page"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = SolMod","category":"page"},{"location":"api/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api/#Base-Functions","page":"API","title":"Base Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"SolMod.idealActivityCoefficient\nSolMod.importSolubility\nSolMod.exportSolubility\nSolMod.importTernaryPhase\nSolMod.exportTernaryPhase\nSolMod.importExperimentalSolubility\nSolMod.exportExperimentalSolubility\nSolMod.importExperimentalTernaryPhase\nSolMod.exportExperimentalTernaryPhase\nSolMod.ternaryPhase\nSolMod.solubilityPoint\nSolMod.errorAnalysis","category":"page"},{"location":"api/#SolMod.idealActivityCoefficient","page":"API","title":"SolMod.idealActivityCoefficient","text":"idealActivityCoefficient(; x::Vector = [0.3, 0.2, 0.5])\n\nThe function will always output an activity coefficient of 1\n\nOptional:\n\nx = Vector that includes the composition of the soluion. Automatically set to [0.3, 0.2, 0.5]\n\n\n\n\n\n","category":"function"},{"location":"api/#SolMod.importSolubility","page":"API","title":"SolMod.importSolubility","text":"importSolubility(filepath::String)\n\nUsing the package XLSX we import the first 2 columns of every sheet in the xlsx file. Every sheet name will be the key of our dictionary and the values will be the 2 columns in the sheet\n\nInputs: \n\nfilepath = String that includes the filepath of the xlsx file that we are intending to import\n\n\n\n\n\n","category":"function"},{"location":"api/#SolMod.exportSolubility","page":"API","title":"SolMod.exportSolubility","text":"exportSolubility(exp, outputfile::String; solvents::Vector = collect(keys(exp)))\n\nUsing the package XLSX we export the dictionary as a dataframe to construct 2 columns in every sheet of the xlsx file for every solvent\n\nInputs: \n\nexp = Dictionary that includes the keys for the solvents and the values that correspond to the temperature and molecular fraction composition of the target molecule\noutputfile = String that includes the filepath of the xlsx file that we are intending to export \n\nOptional:\n\nsolvents = Vector that includes strings of the solvents that are used for the solubility prediction\n\n\n\n\n\n","category":"function"},{"location":"api/#SolMod.importTernaryPhase","page":"API","title":"SolMod.importTernaryPhase","text":"importTernaryPhase(filepath::String)\n\nUsing the package XLSX we import the the first 3 columns of every sheet in the xlsx file. Every sheet name will be the key of our dictionary and the values will be the 3 columns in the sheet\n\nInputs: \n\nfilepath = String that includes the filepath of the xlsx file that we are intending to import\n\n\n\n\n\n","category":"function"},{"location":"api/#SolMod.exportTernaryPhase","page":"API","title":"SolMod.exportTernaryPhase","text":"exportTernaryPhase(exp, outputfile::String; temperatures::Vector = collect(keys(exp)))\n\nUsing the package XLSX we export the dictionary as a dataframe to construct 3 columns in every sheet of the xlsx file for every temperature\n\nInputs: \n\nexp = Dictionary that includes the keys for the temperatures and the values that correspond to the molecular fraction composition of the R(x1) and S(x2) enantiomers and the solvent(x_3) used \noutputfile = String that includes the filepath of the xlsx file that we are intending to export \n\nOptional:\n\ntemperatures = Vector that includes strings of the solvents that are used for the solubility prediction. Automatically uses all the keys in the exp dictionary\n\n\n\n\n\n","category":"function"},{"location":"api/#SolMod.ternaryPhase","page":"API","title":"SolMod.ternaryPhase","text":"ternaryPhase(params::Dict, Œ≥i, Œ≥j, Tx; x_step::Float64 = 0.001, x_start::Float64 = 0.001, \nx_end::Float64 = 0.999, round1::Int64 = 3, round2::Int64 = 3, round3::Int64 = 3, pp::Bool = true, \ne::Bool = true)\n\nThe function will find the activity coefficient of the R enantiomer and the S enantiomer and checks if the Schr√∂denberg Van Laar equation and the Prigogine and Defay equation  is correct. This is done for every molar composition possible. When the solubility equation is true, the molar composition is appended to an array. The array is then processed to remove solubility points beyond the eutectic points\n\nInputs: \n\nparams = Dictionary that includes the solvents used as keys and the respective interaction parameters. The solute key contains the calorimetric data of the target molecule as an array\nsolvent = String of the solvent used for the modeling\nŒ≥ix = Activtiy coefficient of the i component at temperature Tx in the x compositon\nŒ≥jx = Activtiy coefficient of the j component at temperature Tx in the x compositon\nTx = Value of the type Int64/Float64 of the temperature used to determine the activity coefficient\n\nOptional:\n\nx_step = Step size of the molar composition increments. Automatically set to 0.001\nx_start = Start of the iteration of the molar composition. Automatically set to 0.001\nx_end = End of the iteration of the molar composition. Automatically set to 0.999\nround# = This affects the sensitivity of the solubility equation. This rounds to the specified number of digits after the decimal place. Automatically set to 4 for the solubility of the enantiomers and 3 for the solubility of the racemate\npp = Boolean that allows the post-processing of the output array will be done to  remove any points beyond the eutectic points\n\n\n\n\n\n","category":"function"},{"location":"api/#SolMod.solubilityPoint","page":"API","title":"SolMod.solubilityPoint","text":"solubilityPoint(params::Dict, Tx; R = 8.314, e_1 = true, e_2 = true, \ncal_params = params[\"Solute\"], x::Vector = [0.3, 0.2, 0.5], Œ≥i = 1,  Œ≥j = 1)\n\nSolubility is modeled acording to the Schr√∂denberg Van Laar equation:\n\nlog(xi Œ≥i) = (fusŒîH / R) (1 / Tm - 1 / T)\n\nSolubility of the racemate is modeled acording to the Prigogine and Defay equation:\n\nlog(4 Œ≥i Œ≥j xi xj) = ( 2 fusŒîHrac/R ) ( 1 / Tmrac - 1 / T )\n\nWhich details that the solubility of the racemate can be easily computed with the respective calorimetric properties, where fusŒîH_rac is the enthalpy of fusion and Tm is the melting temperature of the racemate.\n\nInputs: \n\nparams = Dictionary that includes the solvents used as keys and the respective interaction parameters. The solute key contains the calorimetric data of the target molecule as an array\nŒ≥ix = Activtiy coefficient of the i component at temperature Tx in the x compositon\nŒ≥jx = Activtiy coefficient of the j component at temperature Tx in the x compositon\nTx = Value of the type Int64/Float64 of the temperature used to determine the activity coefficient\n\nOptional:\n\nR = Value of the type Int64/Float64 that represents the ideal gas constant. Automatically set to 8.314\ne1 = Boolean to determine the solubility of the i component in the solution. Automatically set to true. If e2 is also true, the solubility of the racemate product will be determined\ne2 = Boolean to determine the solubility of the j component in the solution. Automatically set to true. If e1 is also true, the solubility of the racemate product will be determined\nfusŒîH = Enthalpy of fusion of the solute\nTm = Melting temperature of the solute\nfusŒîH_rac = Enthalpy of fusion of the racemate\nTm_rac = Melting temperature of the racemate\n\n\n\n\n\n","category":"function"},{"location":"api/#SolMod.errorAnalysis","page":"API","title":"SolMod.errorAnalysis","text":"errorAnalysis(model, experimental, components)\n\nUsing the package XLSX we export the dictionary as a dataframe to construct 2 columns in every sheet of the xlsx file for every solvent\n\nInputs: \n\nmodel = Array that includes the temperature in the first column, molar composition of the R enantiomer on the second column, and/or the molar composition of the S enantiomer depending on the component value.\nexperimental = Array that includes the keys for the solvents and the values that correspond to the temperature and molecular fraction composition of the target molecule.\ncomponents = Integer value that specifies the number of components\n\n\n\n\n\n","category":"function"},{"location":"api/#NRTL","page":"API","title":"NRTL","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"SolMod.NRTL_activityCoefficient\nSolMod.NRTL_exportParameters\nSolMod.NRTL_importParameters\nSolMod.NRTL_solubilityCurve","category":"page"},{"location":"api/#SolMod.NRTL_activityCoefficient","page":"API","title":"SolMod.NRTL_activityCoefficient","text":"NRTL_activityCoefficient(params::Dict, solvent::String, Tx::Union{Float64, Int64}; \nR::Union{Float64, Int64} = 8.314, e = false, x::Vector = [0.3, 0.2, 0.5], components::Int64 = 3)\n\nTo determine the activity coefficient of the system at the specified composition we use the NRTL activity coefficient model:\n\nlnŒ≥i = ‚àëj=1 (xj ùúèji Gji) / ‚àëk=1 (xk Gkj) + ‚àëj=1 (xj Gij / ‚àë (xk Gkj) (ùúèji - ( ‚àëm=1 (xm ùúèmj Gmj) / ‚àëk=1 (xk Gkj)))) \n\nŒ≥i is the activity coefficient of component i, x is the molar fraction of the i component, and ùúè and G are the binary parameters that truly define the NRTL model\n\nThe interaction parameters ùúè and G are defined by the equations:\n\nùúèij = gij - gjj / (T R) Gij = ùò¶ ^(-‚ç∫ij ùúèij)\n\nùúè defines the temperature dependency in the equation. The parameter g is obtained from experimental data, where gij is the interaction between two components in the solution while gjj can be chosen freely as a reference state. R is defined as the ideal gas constant. ùúè can then be used in the definition for G, which also contains the nonrandomness parameter ‚ç∫. This parameter has no true physical meaning, and can be chosen at a value close to 0.3 in most literature\n\nBy using the boolean \"e\" parameter The function will find the activity coefficient of the R enantiomer and the S enantiomer\n\nInputs: \n\nparams = Dictionary that includes the solvents used as keys and the respective interaction parameters. The solute key contains the calorimetric data of the target molecule as an array\nsolvent = String of the solvent used for the modeling\nTx = Value of the type Int64/Float64 of the temperature used to determine the activity coefficient\n\nOptional:\n\nR = Value of the type Int64/Float64 that represents the ideal gas constant. Automatically set to 8.314\ne = Boolean for enantiomeric processes to determine the activity coefficient of the opposite enantiomer. Automatically set to false\nx = Vector that includes the composition of the soluion. Automatically set to [0.3, 0.2, 0.5]\ncomponents = Integer value that represents the number of components in the solution. Automatically set to 3\n\n\n\n\n\n","category":"function"},{"location":"api/#SolMod.NRTL_exportParameters","page":"API","title":"SolMod.NRTL_exportParameters","text":"NRTL_exportParameters(params, components::Int64, outputfile::String; \nsol::Vector = deleteat!(collect(keys(params)), findall(x->x==\"Solute\", collect(keys(params)))))\n\nUsing the package XLSX we export the dictionary as a dataframe to a sheet of the xlsx file for every solvent. The first sheet will always contain the calorimetric data of the molecule. If 2 components are specified, the sheet will contain a 2x2 matrix of the interaction parameters of the molecule and the solvent. If 3 components are specified, the sheet will contain a 3x3 matrix of the interaction parameters of the R and S enantiomer and the solvent\n\nInputs:\n\nparams = Dictionary that includes the keys for the solute (first sheet) and the solvents used. The values correspond to the parameters used in the model.\ncomponents = An integer that should be either a 2 or a 3. A 2 component system would be used to model a system made up of a target molecule and its solvent. A 3 component system would be used to model a system with an R and S enantiomer along with its solvent\noutputfile = String that includes the filepath of the xlsx file that we are intending to export \n\nOptional:\n\nsol = Vector that includes a list of strings that are the solvents used for the modeling. Automatically loads the keys of the params dictionary\n\n\n\n\n\n","category":"function"},{"location":"api/#SolMod.NRTL_importParameters","page":"API","title":"SolMod.NRTL_importParameters","text":"NRTL_importParameters(filepath::String, components::Int64)\n\nUsing the package XLSX we import the data from the xlsx file as a dataframe to a dictionary where the keys are the solute and the solvents used. The first sheet contains the calorimetric data of the molecule and will be added as a value  to the solute key. When 3 components are specified, aditional calorimetric data for the racemic product will be added as the values [3], and [4] If 2 components are specified, the  2x2 matrix of the interaction parameters of the molecule and the solvent will be imported as a value to their respective solvent keys. If 3 components are specified, the  3x3 matrix of the interaction parameters of the molecule and the solvent will be imported as a value to their respective solvent keys\n\nInputs: \n\nfilepath = String that includes the filepath of the xlsx file that we are intending to import\ncomponents = An integer that should be either a 2 or a 3. A 2 component system would be used to model a system made up of a target molecule and its solvent. A 3 component system would be used to model a system with an R and S enantiomer along with its solvent\n\n\n\n\n\n","category":"function"},{"location":"api/#SolMod.NRTL_solubilityCurve","page":"API","title":"SolMod.NRTL_solubilityCurve","text":"NRTL_solubilityCurve(params::Dict,  T::Vector, solvent::String; j::Union{Float64, Int64} = 0, \nguess::Union{Float64, Int64} = 0, components = 3, Ti_step::Union{Float64, Int64} = 1, \nR::Union{Float64, Int64} = 8.314)\n\nInputs: \n\nparams = Dictionary that includes the solvents used as keys and the respective interaction parameters. The solute key contains the calorimetric data of the target molecule as an array\nT = Vector of length 2 that includes the start and the end temperature for the solubility curve\nsolvent = String of the solvent used for the modeling\n\nOptional:\n\nj = Float or integer value that represents the constant amount of the opposite enantiomer in the solution. Automatically set to 0\nguess = Float or integer value that represents a guess of the solubility point at the initial temperature. This can be inferred from experimental information. Automatically set to 0\ncomponents = Integer value that represents the number of components in the solution. Automatically set to 3\nTi_step = Float or integer value that represents the stepsize of the temperature iterations between the start temperature to the final temperature in the T vector. Automatically set to 1\nR = Value of the type Int64/Float64 that represents the ideal gas constant. Automatically set to 8.314\n\n\n\n\n\n","category":"function"},{"location":"api/#UNIQUAC","page":"API","title":"UNIQUAC","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"SolMod.UNIQUAC_activityCoefficient\nSolMod.UNIQUAC_FredenslundParameters\nSolMod.UNIQUAC_solubilityCurve","category":"page"},{"location":"api/#SolMod.UNIQUAC_activityCoefficient","page":"API","title":"SolMod.UNIQUAC_activityCoefficient","text":"UNIQUAC_activityCoefficient(i_params::Dict, m_params::Matrix, Tx::Union{Float64, Int64}, \nsolvent::String; e = false, x::Vector = [0.3, 0.2, 0.5], z::Int64 = 10, components = 3)\n\nTo determine the activity coefficient of the system at the specified composition we use the UNIQUAC activity coefficient model:\n\nlnŒ≥i = ln (…∏/xi) + (z/2) qi ln (Œ∏/…∏) + li - (…∏/xi) ‚àë(xj lj) + qi[1 - ln(‚àë {Œ∏ ùúè{j i}}) - ‚àë (Œ∏ ùúè{i j})/(‚àë {Œ∏ ùúè})]\n\nInputs: \n\nparams = Dictionary that includes the solvents used as keys and the respective interaction parameters. The solute key contains the calorimetric data of the target molecule as an array\nsolvent = String of the solvent used for the modeling\nTx = Value of the type Int64/Float64 of the temperature used to determine the activity coefficient\n\nOptional:\n\nR = Value of the type Int64/Float64 that represents the ideal gas constant. Automatically set to 8.314\ne = Boolean for enantiomeric processes to determine the activity coefficient of the opposite enantiomer. Automatically set to false\nx = Vector that includes the composition of the soluion. Automatically set to [0.3, 0.2, 0.5]\n\n\n\n\n\n","category":"function"},{"location":"api/#SolMod.UNIQUAC_FredenslundParameters","page":"API","title":"SolMod.UNIQUAC_FredenslundParameters","text":"UNIQUAC_FredenslundParameters(x::Vector; \ndatabase = pathof(SolMod)[1:end-13]*\"examples/Database/UNIQUAC-UNIFAC molecular parameters.xlsx\")\n\nCalculates the variables r and q as a measure of the molecule's size and external surface area to use in the UNIQUAC model.\n\nInputs: \n\nx = Vector that includes a list of strings that are the molecular components of the full molecule\n\nOptional:\n\ndatabase = dataframe of the predetermined molecular component values from the UNIFAC/UNIQUAC\n\n\n\n\n\n","category":"function"},{"location":"AvailableModels/CustomModel/","page":"Custom Model","title":"Custom Model","text":"One of the key features of SolMod.jl is modularity. The objective was to have a software that was able to switch between different methods of obtaining solubility through the calculation of the activity coefficient. SolMod.jl produces two fundamental processes simultaneously: 1. Calculate the activity coefficient at a specified temperature and composition 2. Check for the solubility at the same temperature and composition. We can use the built-in methods of obtaining the activity coefficient or we can customize this method. The way this is achieved is by declaring the activity coefficient as a function:","category":"page"},{"location":"AvailableModels/CustomModel/","page":"Custom Model","title":"Custom Model","text":"Œ≥i() = customActivityCoefficient(x, T)\n\n# In this case x and T represent the temperature and composition","category":"page"},{"location":"AvailableModels/CustomModel/","page":"Custom Model","title":"Custom Model","text":"The custom method we just declared can be any number of alternative methods to obtain the activity coefficient. This can be a predefined dataframe of activity coefficients or using more robust methods available online. After finding the method to calculate the activity coefficient it is only a matter of using it in the rest of the calculations:","category":"page"},{"location":"AvailableModels/CustomModel/","page":"Custom Model","title":"Custom Model","text":"Œ≥i() = customActivityCoefficient(xi, T)\nŒ≥j() = customActivityCoefficient(xj, T)\n\nmodel = ternaryPhase(parameters, Œ≥i, Œ≥j, T)\n\n# i and j refer to the identity of the enantiomers","category":"page"},{"location":"AvailableModels/CustomModel/","page":"Custom Model","title":"Custom Model","text":"Clapeyron.jl is a package for the use and development of thermodynamic models natively in Julia. This software includes a comfortable list of equations such as SAFT, cubic, activity, multi-parameter, and COSMO-SAC. This package served as the inspiration for the development of SolMod.jl and I hope that it only furthers the applicability of Clapeyron.jl.","category":"page"},{"location":"AvailableModels/CustomModel/","page":"Custom Model","title":"Custom Model","text":"Thermopack is a thermodynamic model library for fluids written in Fortran. This package contains a flexible Python wrapper that can be called using PyCall. Python code can be easily called and used in Julia using the PyCall functions and serves to the ease-of-use of Python in Julia.","category":"page"},{"location":"AvailableModels/NRTL/","page":"NRTL","title":"NRTL","text":"The Nonrandom two-liquid model (NRTL) is an activity coefficient model used to calculate the Gibbs free energy of a non-ideal system. It  defines the activity coefficient gamma_i as a function of the molar composition x_i. This model has been used in  chemical engineering applications and has been used in a wide variety of mixtures calculating vapour-liquid and liquid-liquid equilibria [1] . The NRTL equation of a binary system is as follows:","category":"page"},{"location":"AvailableModels/NRTL/","page":"NRTL","title":"NRTL","text":"ln gamma_1 = x_2^2tau_2 1 (dfracG_2 1x_1 + x_2 G_2 1)^2+dfractau_1 2 G_1 2(x_2 + x_1 G_1 2)^2","category":"page"},{"location":"AvailableModels/NRTL/","page":"NRTL","title":"NRTL","text":"where","category":"page"},{"location":"AvailableModels/NRTL/","page":"NRTL","title":"NRTL","text":"G_1 2 = e^-alpha_1 2tau_1 2 \nG_2 1 = e^-alpha_2 1tau_2 1 \ntau_1 2 = dfrac(g_1 2 - g_2 2)RT \ntau_2 1 = dfrac(g_2 1 - g_1 1)RT","category":"page"},{"location":"AvailableModels/NRTL/","page":"NRTL","title":"NRTL","text":"In the NRTL model the R is the universal gas constant, T is the temperature at equilibrium, G is a dimensionless interaction parameter, that depends on a the specific component interaction energy parameter g and a non-randomness factor alpha. The two energy parameters (g_1 2 - g_2 2) and (g_2 1 - g_1 1) are adjustable values obtained by the regression of experimental data. alpha_1 2 and alpha_2 1 are the two adjustable non-randomness parameters. Experimental data for a large number of systems show that they range from 020 to 047. It is sometimes chosen casually as it has no physical correlation [2].","category":"page"},{"location":"AvailableModels/NRTL/","page":"NRTL","title":"NRTL","text":"The equation for a multicomponent system is as follows:","category":"page"},{"location":"AvailableModels/NRTL/","page":"NRTL","title":"NRTL","text":"ln gamma_i = dfracsum_j=1^C tau_j i G_j i x_j  sum_j=1^C  G_j i x_j  + sum_j=1^C dfracx_j G_i jsum_k=1^C  x_k G_k j(tau_i j - dfracsum_k=1^C x_k tau_k j G_k jsum_k=1^C x_k G_k j)","category":"page"},{"location":"AvailableModels/NRTL/","page":"NRTL","title":"NRTL","text":"[1]: Renon H, Prausnitz JM. Estimation of parameters for the NRTL equation for excess Gibbs energies of strongly nonideal liquid mixtures. Industrial & Engineering Chemistry Process Design and Development. 1969 Jul;8(3):413-9.","category":"page"},{"location":"AvailableModels/NRTL/","page":"NRTL","title":"NRTL","text":"[2]: Chen FX, Qi ZL, Feng L, Miao JY, Ren BZ. Application of the NRTL method to correlate solubility of diosgenin. The Journal of Chemical Thermodynamics. 2014 Apr 1;71:231-5.","category":"page"},{"location":"AvailableModels/UNIQUAC-SAC/","page":"UNIQUAC-SAC","title":"UNIQUAC-SAC","text":"The UNIQUAC segment activity coefficient  model (UNIQUAC-SAC) is an activity coefficient model used to calculate the Gibbs free energy of a non-ideal system [1] . It is a modification to the UNIQUAC model and it  defines the activity coefficient gamma_I as a function of the molar composition x_I. In UNIQUAC-SAC the activity coefficient is defined in a way that:","category":"page"},{"location":"AvailableModels/UNIQUAC-SAC/","page":"UNIQUAC-SAC","title":"UNIQUAC-SAC","text":"ln gamma_I = ln gamma_I^C + ln gamma_I^R","category":"page"},{"location":"AvailableModels/UNIQUAC-SAC/","page":"UNIQUAC-SAC","title":"UNIQUAC-SAC","text":"Where ln gamma_I^C and ln gamma_I^R are the combinatorial and residual contributions to the activity coefficient of molecule I. The combinatorial contribution ln gamma_I^C is defined as:","category":"page"},{"location":"AvailableModels/UNIQUAC-SAC/","page":"UNIQUAC-SAC","title":"UNIQUAC-SAC","text":"ln gamma_I^C = ln dfracphi_Ix_I + dfracz2 q_I ln dfractheta_Iphi_I + l_I - dfracphi_Ix_I sum_J x_J l_J","category":"page"},{"location":"AvailableModels/UNIQUAC-SAC/","page":"UNIQUAC-SAC","title":"UNIQUAC-SAC","text":"and","category":"page"},{"location":"AvailableModels/UNIQUAC-SAC/","page":"UNIQUAC-SAC","title":"UNIQUAC-SAC","text":"theta_I = dfracx_I q_Isum_J x_J q_J","category":"page"},{"location":"AvailableModels/UNIQUAC-SAC/","page":"UNIQUAC-SAC","title":"UNIQUAC-SAC","text":"phi_I = dfracx_I r_Isum_J x_J r_J","category":"page"},{"location":"AvailableModels/UNIQUAC-SAC/","page":"UNIQUAC-SAC","title":"UNIQUAC-SAC","text":"l_I = dfracz2 (r_I - q_I) - (r_I - 1)","category":"page"},{"location":"AvailableModels/UNIQUAC-SAC/","page":"UNIQUAC-SAC","title":"UNIQUAC-SAC","text":"r_I = sum_Kv_K^I R_K","category":"page"},{"location":"AvailableModels/UNIQUAC-SAC/","page":"UNIQUAC-SAC","title":"UNIQUAC-SAC","text":"q_I = sum_Kv_K^I Q_K","category":"page"},{"location":"AvailableModels/UNIQUAC-SAC/","page":"UNIQUAC-SAC","title":"UNIQUAC-SAC","text":"The variables r_I and q_I are the volume and surface parameters of molecule I that are calculated using the segment surface area, Q , and segment volume, R , parameters as well as the number of occurrences of the segment on each molecule v^I_K. theta_I and phi_I are surface and volume fraction of component I in the mixture, respectively. The residual part in the term of segment activity coefficient is written as:","category":"page"},{"location":"AvailableModels/UNIQUAC-SAC/","page":"UNIQUAC-SAC","title":"UNIQUAC-SAC","text":"ln gamma_I^R = ln gamma_I^lc = sum_kv_k^I ln Gamma_k - ln Gamma_k^I","category":"page"},{"location":"AvailableModels/UNIQUAC-SAC/","page":"UNIQUAC-SAC","title":"UNIQUAC-SAC","text":"ln Gamma_k = Q_k1 - ln sum_m Theta_m Psi_m k - sum_mdfracTheta_m Psi_m ksum_nTheta_n Psi_n m","category":"page"},{"location":"AvailableModels/UNIQUAC-SAC/","page":"UNIQUAC-SAC","title":"UNIQUAC-SAC","text":"Theta_m = dfracQ_m X_msum_n Q_n X_n","category":"page"},{"location":"AvailableModels/UNIQUAC-SAC/","page":"UNIQUAC-SAC","title":"UNIQUAC-SAC","text":"Psi_m n = exp^-dfracU_m n - U_n mRT = exp^-dfraca_m nT","category":"page"},{"location":"AvailableModels/UNIQUAC-SAC/","page":"UNIQUAC-SAC","title":"UNIQUAC-SAC","text":"X_m = dfracsum_J v_m^J x_Jsum_J sum_n v_n^J x_J","category":"page"},{"location":"AvailableModels/UNIQUAC-SAC/","page":"UNIQUAC-SAC","title":"UNIQUAC-SAC","text":"x_I and x_J are the mole fractions of component I and J, respectively, and the subscripts m, n, and k denote the segment-base species indices. X_m and X_m^I are the segment-based mole fractions of segment species in solution and in pure component I, respectively.","category":"page"},{"location":"AvailableModels/UNIQUAC-SAC/","page":"UNIQUAC-SAC","title":"UNIQUAC-SAC","text":"[1]: Haghtalab A, Yousefi Seyf J. Vapor‚Äìliquid and solid‚Äìliquid modeling with a universal quasichemical segment-based activity coefficient model. Industrial & Engineering Chemistry Research. 2015 Sep 2;54(34):8611-23.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"The focus on enantiopure drugs has forced the pharmaceutical industry to look for cost efficient methods of production. These methods are required to be efficient enough to separate the enantiomeric target from a racemic mixture. One way that this has been achieved is through the direct crystallisation in a racemic mixture. This stochastic process is poorly understood and leads to long and costly experiments. To improve upon this randomness, mathematical models can be developed to predict the thermodynamic values from the separation process. These models look to reduce the experimental time necessary for solubility diagrams. This project was made in collaboration with Imperial College London's Institute of Molecular Science and Engineering and BASF. The goal was to develop a software to model solubility diagrams of enantiomers.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"Asymmetrical crystallisation of a chemical molecule can be traced back to experiments performed by Arago and Biot in 1811. This experiment showed different rotations of polarised light on cut crystals. This was later reinforced on organic products, where similar results were shown [1] . The study of stereochemistry is formally attributed to Louis Pasteur, who in 1848 detected different crystal structures after the crystallising the racemic sodium ammonium salt of tartaric acid. Like Arago and Biot, he also saw that light rotated differently on these crystals [2] . The key discovery was presented by Van 't Hoff and Le Bel during independent research experiments. What awarded Henry Van‚Äôt Hoff the first ever Nobel prize in Chemistry was detailing the relationship between three-dimensional molecular structure and optical activity and the concept of the asymmetric carbon atom [3] [4] .","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"Stereoisomers are molecules that have both the same molecular formula and connectivity but differ in their three-dimensional arrangement. Stereoisomers can be either diastereomers or enantiomers. Diastereomers have different arrangement of atoms that cannot be optically rearranged to form the counterpart. Enantiomers are mirrored non-superposable molecules that could be rearranged via a chiral shift to form the opposite. The standard nomenclature is the R/S system, used to identify distinct enantiomers. ","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"(Image: Enantiomers)","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"Enantiomeric molecules will share the same chemical and physical properties in solution which make them indistinguishable components. In biological systems the function of a protein is determined by its shape, and the shape of a protein can be defined by its amino acid components. 19 out of the 20 amino acids that naturally occur in nature are enantiomers, and only the S enantiomers are used for protein synthesis [5] . This exclusivity extends to pharmaceuticals. Omeprazole (also known as Prilosec) has been used for years as a medication for gastrointestinal diseases. This drug is the crystal product of both enantiomers of omeprazole, commonly known as the racemate. In the treatment of gastrointestinal symptoms, only the S-enantiomer will have any medicinal properties. The R-enantiomer won‚Äôt have the effect of its mirror molecule until it has produced a chiral shift in vivo. The more challenging example is that of salbutamol (also known as albuterol) which is an enantiomeric drug that is used to treat asthma and asthma attacks. R-salbutamol causes the opening of airways in the lungs, but its mirror enantiomer produces a variety of unpleasant side-effects. This apparent limitation has pushed the industry to develop enantiopure drugs, or enantiomeric drugs of only one enantiomer. In the case of omeprazole, even though its pharmacological benefits are still debated, there is no doubt that it has been a financial success [6] [7] .","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"(Image: Ketamine)","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"The symmetrical properties of enantiomers in solution makes the separation of these components a challenge. To synthesize enantiopure medications, the product needs to be purely composed of our desired enantiomer crystal. In very few cases the process is very simple and chiral pooling, or a chiral catalyst can be used [8] . The most common procedure to separate enantiomeric molecules is to use the racemic method. In which you use chiral mobile phase additives to resolve a racemate into a pure enantiomer or you utilise a chiral derivatizing agent for enantioseparation. Either process is costly and time-consuming but have been consistently used in the pharmacological industry [9]. These methods have been successful in both small processes and in batch processes but haven‚Äôt been thoroughly researched in continuous processes. There are some obvious economic benefits to transitioning to continuous processes. This lucrative opportunity interests pharmaceutical companies that want to maximise their production while keeping costs low. Therefore, one method that can be considered is the direct crystallisation of one enantiomer in a racemic mixture [10] . This process achieves enantiospecific crystallization by modulating the concentration of the solutes. By saturating the solution of a mixture with one of the solutes, only the seeded component will crystallize, leaving only the opposite enantiomer in the solution. In a mixture of enantiomers, crystallization can occur in two ways. In conglomerates, crystallization occurs independently while racemic compounds produce a racemate crystal at certain compositions. 90% of enantiomeric mixtures will crystallise as racemic compounds and produce a racemate, which means solubilities are complex to determine [11] .","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"(Image: Preferential Crystallisation)","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"Knowledge of the points of solubility, as a function of their temperature and composition, is essential to produce enantiopure products from a racemic compound. These experiments require extensive trial-and-error results that are both costly and time-consuming. The process is also solvent-solute specific, so the process needs to be repeated across any combination of components. To circumvent this requirement, we can develop a thermodynamic model in order to predict the possible solubility values. ","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"Solubility of a binary system can be predicted using the equations put forth by Schr√∂der and van Laar [12]. A pure solid can be heated until melting temperature has been achieved during constant pressure. At melting temperature the solid will enter the solid-liquid transition phase. The species can then be cooled carefully as a metastable fluid down to its original temperature.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"ln(fracf^S(Tm P)f^S(T P)) = - int_T^T_m (fracH^S-H^igRT^2)dT tag1 \n\nf^S(T_m P) = f^L (T_m P) tag2 \n\nln(fracf^L(T P)f^L(T_m P)) = - int_T^T_m (fracH^L-H^igRT^2)dT tag3 \n\nln(fracf^L(T P)f^S(T P)) = -int_T^T_m fracDelta H_melt(T_m)+(T-T_m)Delta C_pRT^2dT tag4 \n\nDelta H_melt = H^L(T_m) - H^S(T_m) tag4a \n\nH^L = H^L(T_m) + C_p^L(T-T_m) tag4b \n\nln(fracf^L(T P)f^S(T P)) = fracDelta H_meltR(frac1T-frac1T_m) - fracT_mRDelta C_p (frac1T-frac1T_m - fracDelta C_pR ln (frac TT_m) tag5 ","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"Under the assumption that the chemical potential of any species in all phases can be assumed to be identical. This requires the assumption that the fugacity of a dissolved solute equals the fugacity of the undissolved species in the solid state. During ideal interactions, the mutual solubility of the liquid and solid phase is ignored. The heat capacity below the melting point cannot be experimentally calculated. Its shape is not clearly defined either, which means the value cannot be extrapolated \\cite{m}. Approximations between the solid and liquid heat capacities have been developed, such as making the value equal at the temperature of fusion under the assumption of being temperature insensitive \\cite{n}. In most cases, good results can be produced when neglecting the heat capacity contribution which leads to the simplified binary solubility equation.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"The ideal solubility of a compound (x_i^sat) in a solution can be calculated by knowing the compound‚Äôs calorimetric properties (Œî_fusH_i T_m) and the activity coefficient (gamma_i^L). The calorimetric properties of a solute can be easily determined and used irregardless of the solvent.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"ln(x^sat_iŒ≥^L_i) = dfracŒî_fusH_iR(dfrac1T_mi - dfrac1T)","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"The activity coefficient of a non-ideal mixture must be computed using thermodynamic models. Traditionally, empirical methods have been used to determine the activity coefficient. Empirical models such as Wilson, NRTL (Non-random two liquid), UNIQUAC (Universal Quasichemical), etc., have been successfully used in industry to model pharmaceutical solubility [13] . These equations are dependent on interaction parameters derived from experimental research. Once obtained, the unique solute-solvent parameters can be used in any composition at a broad temperature range. Completely predictive models have also been used to determine the activity coefficient with limited success. The required information can be determined by either quantum calculations using COSMO-RS (Conductor like Screening Model for Real Solvents) or equations of state such as PC-SAFT (Perturbation-Chain Statistical Associating Fluid Theory). Both methods will yield an acceptable activity coefficient, but their use is considered less reliable compared to empirical models if the experimental data is available [14] . Recently, modifications to the empirical methods have yielded semi-empirical formulations that attempt to minimize error. Predominantly, this comes as the SAC modification (Segment Activity Coefficient), where the molecule‚Äôs surface interactions are divided in segments and each type of solute-solvent interaction (hydrophobic, hydrophilic, and polar) has been predefined.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"The solubility data of enantiomeric mixtures is easily interpreted using a ternary phase diagram. In this three-variable chart, every point represents a composition of the R/S enantiomer and the solvent of the solution. The Schr√∂der and van Laar equation allows for the solubility lines of the enantiomers to be calculated. This is the case for conglomerates, but in most situations the mixture will behave as a racemic compound, where the racemate must be accounted for. Like single enantiomers, we require the activity coefficient of the racemate to model solubility. An expansion of the Schr√∂der and van Laar equation leads to a modified Prigogine and Defay equation [15] [16] . This relationship can be used to determine the solubility point of the racemate with the activity coefficient of the constituent enantiomers. This allows for the calculation of the racemate solubility curve and determining the eutectic points of the solution. Knowing the eutectic points gives us enough information to design a process where we can produce one kind of crystal enantiomer.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"(Image: Ternary Phase Diagram)","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"ln space 4 space x_i^satgamma^L_ix_j^satgamma^L_j = dfracŒî_fusH_racR(dfrac1T_m rac - dfrac1T)","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"[1]: Leclercq F. Arago, Biot, and Fresnel Elucidate Circular Polarization. Revue dhistoire des sciences. 2013;66(2):395-416.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"[2]: Pasteur L. Memoires sur la relation qui peut exister entre la forme crystalline et al composition chimique, et sur la cause de la polarization rotatoire. Compt. rend.. 1848;26:535-8.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"[3]: Hoff JH. Voorstel tot uitbreiding der tegenwoordig in de scheikunde gebruikte structuur-formules in de ruimte: benevens een daarmee samenhangende opmerking omtrent het verband tusschen optisch actief vermogen en chemische constitutie van organische verbindingen. Greven; 1874.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"[4]: Le Bel JA. On the relations which exist between the atomic formulas of organic compounds and the rotatory power of their solutions. Bull. Soc. Chim. 1874;22:337-47.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"[5]: Bertrand M, Chabin A, Brack A, Westall F. Separation of amino acid enantiomers VIA chiral derivatization and non-chiral gas chromatography. Journal of Chromatography A. 2008 Feb 8;1180(1-2):131-7.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"[6]: Asghar W, Pittman E, Jamali F. Comparative efficacy of esomeprazole and omeprazole: Racemate to single enantiomer switch. DARU Journal of Pharmaceutical Sciences. 2015 Dec;23(1):1-7.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"[7]: Conley JG, Bican PM, Ernst H. Value articulation: a framework for the strategic management of intellectual property. California Management Review. 2013 Jul;55(4):102-20.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"[8]: Hawkins JM, Watson TJ. Asymmetric catalysis in the pharmaceutical industry. Angewandte Chemie International Edition. 2004 Jun 21;43(25):3224-8.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"[9]: Mane S. Racemic drug resolution: a comprehensive guide. Analytical Methods. 2016;8(42):7567-86.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"[10]: Lorenz H, Sheehan P, Seidel-Morgenstern A. Coupling of simulated moving bed chromatography and fractional crystallisation for efficient enantioseparation. Journal of Chromatography A. 2001 Jan 26;908(1-2):201-14.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"[11]: Lorenz H, Temmel E, Seidel-Morgenstern A. Continuous Enantioselective Crystallization of Chiral Compounds. InThe Handbook of Continuous Crystallization 2020 Feb 4 (pp. 422-468).","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"[12]: Jacques J, Collet A, Wilen SH. Enantiomers, racemates, and resolutions. Wiley; 1981.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"[13]: Salimi M, Zarenezhad B, Fakhraian H, Choobdari E. Thermodynamic modeling of chiral compounds solubility using Correlative and predictive models. Journal of Applied Solution Chemistry and Modeling. 2015 Jul 1;4(3):143.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"[14]: Tung HH, Tabora J, Variankaval N, Bakken D, Chen CC. Prediction of pharmaceutical solubility via NRTL-SAC and COSMO-SAC. Journal of Pharmaceutical Sciences. 2008 May 1;97(5):1813-20.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"[15]: Prigogine I, Defay R. Chemical thermodynamics. Norwich: Jarrold & Sons. 1958.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"[16]: Tulashie SK, Kaemmerer H, Lorenz H, Seidel-Morgenstern A. Solid‚àí liquid equilibria of mandelic acid enantiomers in two chiral solvents: experimental determination and model correlation. Journal of Chemical & Engineering Data. 2010 Jan 14;55(1):333-40","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"Once SolMod.jl is installed, it can be loaded using:","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"using SolMod","category":"page"},{"location":"basic_usage/#Importing-Parameters","page":"Basic Usage","title":"Importing Parameters","text":"","category":"section"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"We import our parameters from .xlsx files that contain the dataframe necessary to produce a solubility calculation. This format is used to exploit the use of sheets as the parameters for different solvents. The first sheet contains the calorimetric data of the enantiomeric molecule and the racemate:","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"fusŒîH Tm fusŒîH_rac Tm_rac\n24,500 404.65 25,600 387.75","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"The data frame is imported as a dictionary to the workspace. When specifying parameters of 3 components, the function will automatically import the calorimetric properties of the racemate as well:","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"params = NRTL_importParameters(dir, 3)\n\nparams[\"Solute\"] = 24500  404.65  25600  387.75","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"The parameters specify the interaction values determined from either experimental or predicted values. Interaction parameters are model specific, in this case we will use those defined by the NRTL model:","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"‚ç∫_1 ‚ç∫_2 ‚ç∫_3 g_1 g_2 g_3\n0 0.98 0.40 0 216,631 25,269\n0.98  0 0.40 141,879 0\n0.40 0.40 0 -3,235.60 -3,235.60 0","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"The dataframe is imported as a dictionary with the key entry labelled as the solvent used:","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"params[\"Solvent\"][\"‚ç∫\"] = [0         0.979748  0.40104\n                          0.979748  0         0.40104\n                          0.40104   0.40104   0      ]\n\nparams[\"Solvent\"][\"g\"] = [0       216631  25269\n                          141879  0       25269\n                          -3235.6 -3235.6 0    ]","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"note: Note\nAlthough SolMod.jl imports parameters from .xlsx files, nothing stops you from creating the parameter dataframes directly in Julia. Parameters in SolMod.jl are read as dictionaries. Examples like the one above are shown to demonstrate the output of the import function and how to replicate it yourself.","category":"page"},{"location":"basic_usage/#Binary-Curve","page":"Basic Usage","title":"Binary Curve","text":"","category":"section"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"With the parameters imported, we can use the model to determine the activity coefficient. We want to predict a solubility curve for the S-enantiomer. The curve will range from  298 K  to  334 K  and an initial guess of the composition:","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"NRTL_solubilityCurve(params, [298, 334], \"Solvent\", guess = 0.12, components = 3)","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"We can also obtain an error analysis using SolMod.jl. We will get an output of the residuals from the experimental data and the RMSD (Root Mean Square Deviation). The RMSD of predicted values  hatx  for times a with variables observed over  A  times, is computed for  A  different predictions as the square root of the mean of the squares of the deviations:","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"RMSD = sqrtdfracsum_a=1^A(hatx_a - x_a)^2A","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"errorAnalysis(model, experimental, 2)","category":"page"},{"location":"basic_usage/#Ternary-Phase-Diagram","page":"Basic Usage","title":"Ternary Phase Diagram","text":"","category":"section"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"Now we can do what this software was created for and predict ternary phase behaviour. We want to start by defining the method we will use to calculate the activity coefficient for component i (S-enantiomer) and for component j (R-enantiomer). For example calculating the activity coefficient using the NRTL model at  298 K :","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"Œ≥i() = NRTL_activityCoefficient(params, \"Solvent\", 298)\nŒ≥j() = NRTL_activityCoefficient(params, \"Solvent\", 298, e = false)","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"Once the activity coefficient methods are set, we want to check solubility over every possible point at a specific temperature using the ternaryPhase function:","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"model = ternaryPhase(params, Œ≥i, Œ≥j, 298)","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"Similar to before we can obtain the error analysis related to the ternary phase diagram with the same function as before but increasing the number of components to 3:","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"errorAnalysis(model, experimental, 3)","category":"page"},{"location":"basic_usage/#Next-Steps","page":"Basic Usage","title":"Next Steps","text":"","category":"section"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"After this is done, we can either plot the diagrams inside Julia using TernaryPlots.jl or using PyCall to plot with Matplotlib or Plotly. ","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"If Julia is not your software of choice for plotting, then you can make use of SolMod's export features an save the dataframe created as an .xlsx file:","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"exportTernaryPhase(model, \"TPD.xlsx\")","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"This process can then be repeated across multiple temperatures and using different activity coefficient methods. One of the goals of this project was modularity. The many ways to obtain the activity coefficient requires the user to employ various methods to obtain accurate predictions. By separating the method to obtain the activity coefficient with the prediction of solubility we give the user the freedom to experiment with the calculations.","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"After learning the basic usage of this software you can read a more thorough analysis with results using the jupyter notebooks in the notebook examples section, read more on the various models available, or export an existing method to calculate the activity coefficient.","category":"page"},{"location":"","page":"Home","title":"Home","text":"SolMod.jl is a Julia package used for the prediction of solubility with the focus on creating ternary phase diagrams for pharmaceutical solubility of enantiopure drugs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The documentation is laid out as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Background: Find scientific basis to determine the activity coefficient of a compound in a mixture and find the point of solubility.  \nBasic Usage: Find out how to use the available models to determine the activity coefficient and the respective solubility of a molecule.\nNotebook Examples: A list of available notebooks showcasing different functionalities of the package.\nAPI: A list of all available methods.\nThermodynamic Models:\nEmpirical Models:\nNRTL\nUNIQUAC\nSemi-Empirical Models:\nNRTL-SAC\nUNIQUAC-SAC\nCustom Model","category":"page"},{"location":"#Author","page":"Home","title":"Author","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Roberto Gambarini, Imperial College London","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SolMod.jl is licensed under the MIT license.","category":"page"},{"location":"AvailableModels/NRTL-SAC/","page":"NRTL-SAC","title":"NRTL-SAC","text":"The Nonrandom two-liquid segment activity coefficient  model (NRTL-SAC) is an activity coefficient model used to calculate the Gibbs free energy of a non-ideal system [1] . It is a modification to the NRTL model and it  defines the activity coefficient gamma_I as a function of the molar composition x_I. In NRTL-SAC the activity coefficient is defined in a way that:","category":"page"},{"location":"AvailableModels/NRTL-SAC/","page":"NRTL-SAC","title":"NRTL-SAC","text":"ln gamma_I = ln gamma_I^C + ln gamma_I^R","category":"page"},{"location":"AvailableModels/NRTL-SAC/","page":"NRTL-SAC","title":"NRTL-SAC","text":"Where ln gamma_I^C and ln gamma_I^R are the combinatorial and residual contributions to the activity coefficient of molecule I. The residual contribution ln gamma_I^R is defined as:","category":"page"},{"location":"AvailableModels/NRTL-SAC/","page":"NRTL-SAC","title":"NRTL-SAC","text":"ln gamma_I^R = ln gamma_I^lc = sum_mr_mI ln Gamma_m^lc - ln Gamma_m^lc I","category":"page"},{"location":"AvailableModels/NRTL-SAC/","page":"NRTL-SAC","title":"NRTL-SAC","text":"The residual contribution of the activity coefficient is set equal to the local composition (lc) interaction contribution ln gamma_i^lc. The segment activity coefficient Gamma_m^lc and the segment activity coefficient for the molecule Gamma_m^lc I can be computed as follows:","category":"page"},{"location":"AvailableModels/NRTL-SAC/","page":"NRTL-SAC","title":"NRTL-SAC","text":"ln Gamma_m^lc = dfracsum_j tau_j m G_j m x_j  sum_k  G_k m x_k  + sum_m dfracx_m G_m msum_k  x_k G_k m(tau_m m - dfracsum_j x_j tau_j m G_j msum_k x_k G_k m)","category":"page"},{"location":"AvailableModels/NRTL-SAC/","page":"NRTL-SAC","title":"NRTL-SAC","text":"ln Gamma_m^lc I = dfracsum_j I tau_j m G_j m x_j  sum_k  G_k m x_k I  + sum_m dfracx_m I G_m msum_k  x_k I G_k m(tau_m m - dfracsum_j x_j I tau_j m G_j msum_k x_k I G_k m)","category":"page"},{"location":"AvailableModels/NRTL-SAC/","page":"NRTL-SAC","title":"NRTL-SAC","text":"x_j = dfracsum_J x_J r_j Jsum_I sum_i x_I r_i I","category":"page"},{"location":"AvailableModels/NRTL-SAC/","page":"NRTL-SAC","title":"NRTL-SAC","text":"x_j I = dfracr_j Isum_i r_i I","category":"page"},{"location":"AvailableModels/NRTL-SAC/","page":"NRTL-SAC","title":"NRTL-SAC","text":"Where i, j, k, m, and m are the segment-based species indices, I and J are the component indices, x_j is the segment-based mole fraction of segment species j, x_J is the mole fraction of component J, r_mI is the number of segment species m contained in component I. The G and tau parameters are the same from the standard NRTL model defined by the following:","category":"page"},{"location":"AvailableModels/NRTL-SAC/","page":"NRTL-SAC","title":"NRTL-SAC","text":"G = e^-alpha tau","category":"page"},{"location":"AvailableModels/NRTL-SAC/","page":"NRTL-SAC","title":"NRTL-SAC","text":"The combinatorial contribution of the activity coefficient ln gamma_I^C is solved from the Flory-Huggins term:","category":"page"},{"location":"AvailableModels/NRTL-SAC/","page":"NRTL-SAC","title":"NRTL-SAC","text":"ln gamma_I^C = ln dfracphi_Ix_I + 1 - r_I sum_J dfracphi_Jx_J","category":"page"},{"location":"AvailableModels/NRTL-SAC/","page":"NRTL-SAC","title":"NRTL-SAC","text":"r_I = sum_i r_i I","category":"page"},{"location":"AvailableModels/NRTL-SAC/","page":"NRTL-SAC","title":"NRTL-SAC","text":"phi_I = dfracr_I x_Isum_J r_J x_J","category":"page"},{"location":"AvailableModels/NRTL-SAC/","page":"NRTL-SAC","title":"NRTL-SAC","text":"[1]: Chen CC, Song Y. Solubility modeling with a nonrandom two-liquid segment activity coefficient model. Industrial & engineering chemistry research. 2004 Dec 22;43(26):8354-62.","category":"page"},{"location":"AvailableModels/UNIQUAC/","page":"UNIQUAC","title":"UNIQUAC","text":"The universal quasichemical (UNIQUAC) model is frequently used in the correlating experimental data for phase equilibrium. It is an extension from the quasi-chemical theory, where the local area fraction is used as the composition variable and the use of a combinatorial factor [1] . In this model, a liquid is represented by a three-dimensional lattice sites and each molecule is divided in into individual segments. The UNIQUAC equation consists of two adjustable parameters per binary and two pure structural parameters per component. The equation for a binary mixture is:","category":"page"},{"location":"AvailableModels/UNIQUAC/","page":"UNIQUAC","title":"UNIQUAC","text":"lngamma_1 = ln dfracphi_1x_1 + dfracz2 q_1 ln dfractheta_1phi_1 + phi_2 (l_1 - dfracr_1r_2 l_2) - q_1 ln(theta_1 + theta_2 tau_2 1)+ theta_2 q_1(dfractau_2 1theta_1 + theta_2 tau_2 1 - dfractau_1 2theta_2 + theta_1 tau_1 2)","category":"page"},{"location":"AvailableModels/UNIQUAC/","page":"UNIQUAC","title":"UNIQUAC","text":"l_i = dfracz2(r_i - q_i) - (r_i - 1)","category":"page"},{"location":"AvailableModels/UNIQUAC/","page":"UNIQUAC","title":"UNIQUAC","text":"The variables r and q are measures of the molecule's size and external surface area. The coordination number z can be assigned casually between values of 6  z  12 but is consistent with literature at a values of 10. The variable phi and theta are the average segment fraction and average area fraction and can be calculated as:","category":"page"},{"location":"AvailableModels/UNIQUAC/","page":"UNIQUAC","title":"UNIQUAC","text":"phi_i = dfracx_i r_isum_j x_j r_j","category":"page"},{"location":"AvailableModels/UNIQUAC/","page":"UNIQUAC","title":"UNIQUAC","text":"theta_i = dfracx_1 q_1sum_j x_j q_j","category":"page"},{"location":"AvailableModels/UNIQUAC/","page":"UNIQUAC","title":"UNIQUAC","text":"tau is the adjustable binary parameter and can be defined using the equation:","category":"page"},{"location":"AvailableModels/UNIQUAC/","page":"UNIQUAC","title":"UNIQUAC","text":"tau_i j = e^(-dfraca_i jT)","category":"page"},{"location":"AvailableModels/UNIQUAC/","page":"UNIQUAC","title":"UNIQUAC","text":"T is the temperature at equilibrium, and a is the specific component interaction energy parameter obtained by the regression of experimental data. The equation for a multicomponent mixture can be defined as:","category":"page"},{"location":"AvailableModels/UNIQUAC/","page":"UNIQUAC","title":"UNIQUAC","text":"lngamma_i = ln dfracphi_ix_i + dfracz2 q_i ln dfractheta_iphi_i + l_i - dfracphi_ix_i sum^n_j = 1 x_j l_j + q_i1 - ln(sum^n_j = 1 theta_j tau_j i) - sum^n_j = 1 dfractheta_j tau_i jsum^n_k = 1theta_k tau_k j","category":"page"},{"location":"AvailableModels/UNIQUAC/","page":"UNIQUAC","title":"UNIQUAC","text":"Where n is the number of components in the mixture","category":"page"},{"location":"AvailableModels/UNIQUAC/","page":"UNIQUAC","title":"UNIQUAC","text":"[1]: Abrams DS, Prausnitz JM. Statistical thermodynamics of liquid mixtures: a new expression for the excess Gibbs energy of partly or completely miscible systems. AIChE Journal. 1975 Jan;21(1):116-28.","category":"page"}]
}
